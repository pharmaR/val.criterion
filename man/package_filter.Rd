% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/available_packages.R
\name{package_filter}
\alias{package_filter}
\title{Create a Package Filter}
\usage{
package_filter(
  cond,
  repos = opt("repos"),
  exceptions = opt("exceptions"),
  actions = opt("actions"),
  quiet = opt("quiet"),
  db = function() available_metrics(repos = repos),
  add = TRUE,
  envir = parent.frame()
)
}
\arguments{
\item{cond}{\code{expression} to use to filter packages. Package metrics are
referred to by their name and are expected to be vectors of length equal
to the number of packages. For details on metric names and types, see
\code{\link[val.meter:metrics]{val.meter::metrics}}.}

\item{repos}{\code{character(n)} list of repositories to search for metrics.
Defaults to package option, \code{"val.criterion.repos"}, which should direct
to a metrics database.}

\item{db}{\code{available.packages()}-style \code{matrix}, a \code{character}
vector of repository urls, or a \code{function} which should return a the metric
\code{matrix}. By default, will search through \code{options(repos)} for metrics
databases.}

\item{add}{\code{logical(1)} used to add to existing filters or replace them
entirely. Defaults to \code{TRUE}. See \code{\link[=available.packages]{available.packages()}} for more
details on the default filters. In most cases, you probably want to keep
this as-is, as the default filters impose necessary constraints such as
R version and platform consistency.}

\item{envir}{\code{environment} in which the filter expression should be
evaluated.}
}
\description{
Create a Package Filter
}
\examples{
\dontrun{
library(val.meter)

# simulate repository of metrics, mirroring existing available packages
repo <- val.meter::random_repo(n = 10)
options(
  repos = repo,  # for the sake of example
  val.criterion.repos = repo,
  available_packages_filters = package_filter({
    r_cmd_check_error_count == 0 &
      percentile(downloads_total) >= 0.25
  })
)

# grab the first package that was disallowed by our filter
pkgs <- available.packages()
filtered_pkg <- pkgs[pkgs$Repository == "<filtered>", ][[1L]]

# attempt to install it
install.packages(filtered_pkg)
}

}
